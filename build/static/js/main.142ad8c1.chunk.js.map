{"version":3,"sources":["components/Upload.js","components/Dialog1.js","App.js","reportWebVitals.js","index.js"],"names":["Upload","props","onFileChange","event","setState","selectedFile","target","files","ExcelRenderer","err","resp","console","log","rows","fileData","state","name","type","lastModifiedDate","toDateString","style","padding","uploadFile","e","fileType","slice","lastIndexOf","indexOf","alert","fetch","method","headers","body","JSON","stringify","then","response","json","data","handleClose","handleData","btn","catch","error","p","this","Button","onClick","variant","color","className","accept","id","onChange","htmlFor","component","startIcon","React","Component","Dialog1","q","numInvoices","totSum","numVendor","invalidInvoices","Dialog","onClose","aria-labelledby","open","close","DialogTitle","DialogContent","dividers","DialogActions","autoFocus","App","dialogOpen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.142ad8c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Upload.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport {ExcelRenderer} from 'react-excel-renderer';\r\n\r\n\r\nexport class Upload extends React.Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selectedFile: null,\r\n            rows: null,\r\n            btn: false\r\n        }\r\n    }\r\n\r\n// this func is for saving the Excel file data into the state.\r\n    onFileChange = event => { \r\n     \r\n        this.setState({ selectedFile: event.target.files[0] });\r\n\r\n        ExcelRenderer(event.target.files[0], (err, resp) => {\r\n            if(err){\r\n                console.log(err);   \r\n            }\r\n            else{\r\n                this.setState({ rows: resp.rows });\r\n            }\r\n          });\r\n       \r\n    };\r\n\r\n// this func is to display the details of the file selected\r\n    fileData = () => { \r\n    \r\n        if (this.state.selectedFile) {  \r\n          return ( \r\n            <div>\r\n                <br></br>\r\n                <h2>File Details:</h2> \r\n                <p>File Name: {this.state.selectedFile.name}</p> \r\n                <p>File Type: {this.state.selectedFile.type}</p> \r\n                <p> \r\n                Last Modified:{\" \"} \r\n                {this.state.selectedFile.lastModifiedDate.toDateString()} \r\n                </p> \r\n            </div> \r\n          ); \r\n        } else { \r\n          return ( \r\n            <div> \r\n                <br></br>\r\n                <h4 style={{padding:'1%'}}>Choose before Pressing the Upload button</h4> \r\n            </div> \r\n          ); \r\n        } \r\n      }; \r\n\r\n// as soon as the user clicks the Upload button, the file type is validated\r\n// whether it is an excel file or not. If yes, then it is sent to the server\r\n// using fetch Post API.\r\n    uploadFile = e =>{\r\n\r\n        const validType = ['.xlsx', '.xls'];\r\n\r\n        let fileType = this.state.selectedFile.name.slice( this.state.selectedFile.name.lastIndexOf('.'), )\r\n\r\n        if ( validType.indexOf(fileType) < 0 ){\r\n            alert('Invalid File Format. Use only .xls or .xlsx')\r\n        }\r\n        else {\r\n\r\n// fetch Post API\r\n            fetch('/upload', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({rows: this.state.rows })\r\n            })\r\n            .then(response => response.json() )\r\n            .then(data => {\r\n                this.props.handleClose();\r\n                this.props.handleData(data);\r\n                this.setState({ btn: true });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                alert(\"There was some error Uploading. Kindly Upload Again.\");\r\n            } )\r\n        }\r\n    }    \r\n\r\nrender(){\r\n\r\n// this variable is used for displaying the Button as soon as request recieved \r\n// from the backend.\r\n    let p;\r\n    if(this.state.btn){\r\n        p = (<Button onClick={()=>{ this.props.handleClose() }} variant='contained' color=\"Default\" >\r\n                Info\r\n            </Button>)\r\n    }\r\n    else{\r\n        p = ' '\r\n    }\r\n\r\n    return (\r\n      <div className='upload-main' >\r\n        <h1>Select an excel file to process.</h1>\r\n        <div>\r\n            <input\r\n                accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel'\r\n                className='upload-input'\r\n                id=\"contained-button-file\"\r\n                type=\"file\"\r\n                onChange={this.onFileChange}\r\n            />\r\n            <label htmlFor=\"contained-button-file\" className='upload-icon-label'>\r\n                <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<PublishIcon />}>\r\n                    Choose\r\n                </Button>\r\n            </label>\r\n            <Button onClick={this.uploadFile} variant=\"outlined\" color=\"secondary\">\r\n                Upload\r\n            </Button>\r\n        </div>\r\n\r\n        {this.fileData()}\r\n\r\n        <br></br>\r\n        <br></br>\r\n\r\n        {p}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload","import React, { Component } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport class Dialog1 extends Component {\r\n    render() {\r\n\r\n// this variable is to conditionally display the data inside the dialog box.\r\n        let q;\r\n        if(this.props.data){\r\n            q = (\r\n                <div>\r\n                    <p>Numer of Invoices Uploaded : <strong>{this.props.data.numInvoices}</strong></p>\r\n                    <p>The Total Sum of Invoice Amounts : <strong>{this.props.data.totSum}</strong></p>\r\n                    <p>Total Number of Vendors whose invoices were uploaded : <strong>{this.props.data.numVendor}</strong></p>\r\n                    <p>Total Number of Invalid Invoices : <strong>{this.props.data.invalidInvoices}</strong></p>        \r\n                </div>\r\n                )\r\n        }\r\n        else{\r\n            q = ' '\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                \r\n                <Dialog onClose={this.props.handleClose} aria-labelledby=\"customized-dialog-title\" open={this.props.close}>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={this.props.handleClose}>\r\n                        Sheet Info\r\n                    </DialogTitle>\r\n                    <DialogContent dividers>\r\n\r\n                        {q}\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button autoFocus onClick={this.props.handleClose} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dialog1\r\n","\nimport React from 'react';\nimport Upload from './components/Upload'\nimport Dialog1 from './components/Dialog1'\n\nexport default class App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      dialogOpen: false,\n      data: null\n    }\n  }\n  handleClose = () =>{\n    this.setState({dialogOpen: !this.state.dialogOpen})\n}\n\n  handleData = e =>{\n    this.setState({ data: e })\n  }\n\nrender(){\n  return (\n    <div className=\"App\">\n      <Upload handleClose= {this.handleClose} handleData= {this.handleData} />\n      <Dialog1 handleClose= {this.handleClose} close= {this.state.dialogOpen} data= {this.state.data} />\n    </div>\n  );\n}\n}\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}